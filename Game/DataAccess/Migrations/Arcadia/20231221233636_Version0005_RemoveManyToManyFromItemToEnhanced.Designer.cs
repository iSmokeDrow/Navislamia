// <auto-generated />

#nullable disable

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Navislamia.Game.DataAccess.Contexts;

namespace Navislamia.Game.DataAccess.Migrations.Arcadia
{
    [DbContext(typeof(ArcadiaContext))]
    [Migration("20231221233636_Version0005_RemoveManyToManyFromItemToEnhanced")]
    partial class Version0005_RemoveManyToManyFromItemToEnhanced
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.ChannelResourceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Bottom")
                        .HasColumnType("integer");

                    b.Property<int>("ChannelType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Left")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Right")
                        .HasColumnType("integer");

                    b.Property<int>("Top")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ChannelResources");
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.EffectResourceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<long?>("ItemEffectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ItemEffectOrdinalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModelEffectResourceEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("SetId")
                        .HasColumnType("bigint");

                    b.Property<short?>("SetParts")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ModelEffectResourceEntityId");

                    b.HasIndex("ItemEffectId", "ItemEffectOrdinalId");

                    b.HasIndex("SetId", "SetParts");

                    b.ToTable("EffectResources");
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.EnhanceResourceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("LocalFlag")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EnhanceType")
                        .HasColumnType("integer");

                    b.Property<int>("FailResult")
                        .HasColumnType("integer");

                    b.Property<short>("MaxEnhance")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal[]>("Percentage")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric[]");

                    b.Property<long?>("RequiredItemId")
                        .HasColumnType("bigint");

                    b.HasKey("Id", "LocalFlag");

                    b.HasIndex("RequiredItemId");

                    b.ToTable("EnhanceResources", t =>
                        {
                            t.HasCheckConstraint("CK_EnhanceResourceEntity_Percentage_MaxSize20", "cardinality(\"Percentage\") <= 20");
                        });
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.ItemEffectResourceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("OrdinalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EffectLevel")
                        .HasColumnType("boolean");

                    b.Property<int>("EffectTrigger")
                        .HasColumnType("integer");

                    b.Property<int>("EffectType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("TooltipId")
                        .HasColumnType("bigint");

                    b.Property<decimal[]>("Values")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric[]");

                    b.HasKey("Id", "OrdinalId");

                    b.HasIndex("TooltipId");

                    b.ToTable("ItemEffectResources", t =>
                        {
                            t.HasCheckConstraint("CK_ItemEffectResourceEntity_Values_MaxSize20", "cardinality(\"Values\") <= 20");
                        });
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.ItemResourceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AvailablePeriod")
                        .HasColumnType("integer");

                    b.Property<short[]>("BaseTypes")
                        .HasColumnType("smallint[]");

                    b.Property<decimal[,]>("BaseValues")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric[]");

                    b.Property<int>("CoolTime")
                        .HasColumnType("integer");

                    b.Property<short>("CoolTimeGroup")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("DecreaseType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("EffectId")
                        .HasColumnType("bigint");

                    b.Property<int>("Endurance")
                        .HasColumnType("integer");

                    b.Property<int>("Enhance")
                        .HasColumnType("integer");

                    b.Property<long[]>("EnhanceIds")
                        .HasColumnType("bigint[]");

                    b.Property<decimal[,]>("EnhanceValues")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric[]");

                    b.Property<int>("EtherealDurability")
                        .HasColumnType("integer");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<int>("Group")
                        .HasColumnType("integer");

                    b.Property<int>("HuntaholicPoint")
                        .HasColumnType("integer");

                    b.Property<int>("ItemBaseType")
                        .HasColumnType("integer");

                    b.Property<int>("ItemType")
                        .HasColumnType("integer");

                    b.Property<int>("ItemUseFlag")
                        .HasColumnType("integer");

                    b.Property<short>("JobDepth")
                        .HasColumnType("smallint");

                    b.Property<int>("JobRestriction")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("Material")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("NameId")
                        .HasColumnType("bigint");

                    b.Property<short[]>("OptTypes")
                        .HasColumnType("smallint[]");

                    b.Property<decimal[,]>("OptValues")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric[]");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("RaceRestriction")
                        .HasColumnType("integer");

                    b.Property<decimal>("Range")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<string>("ScriptText")
                        .HasColumnType("text");

                    b.Property<long?>("SetId")
                        .HasColumnType("bigint");

                    b.Property<short>("SetPart")
                        .HasColumnType("smallint");

                    b.Property<long?>("SkillId")
                        .HasColumnType("bigint");

                    b.Property<int>("SocketCount")
                        .HasColumnType("integer");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<int>("StateLevel")
                        .HasColumnType("integer");

                    b.Property<int>("StateTime")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("SummonId")
                        .HasColumnType("bigint");

                    b.Property<int>("TargetMaxLevel")
                        .HasColumnType("integer");

                    b.Property<int>("TargetMinLevel")
                        .HasColumnType("integer");

                    b.Property<decimal>("ThrowRange")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<long?>("TooltipId")
                        .HasColumnType("bigint");

                    b.Property<int>("UseMaxLevel")
                        .HasColumnType("integer");

                    b.Property<int>("UseMinLevel")
                        .HasColumnType("integer");

                    b.Property<int>("WearType")
                        .HasColumnType("integer");

                    b.Property<decimal>("Weight")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("EffectId")
                        .IsUnique();

                    b.HasIndex("NameId");

                    b.HasIndex("SkillId");

                    b.HasIndex("StateId");

                    b.HasIndex("SummonId");

                    b.HasIndex("TooltipId");

                    b.ToTable("ItemResources", t =>
                        {
                            t.HasCheckConstraint("CK_ItemResourceEntity_BaseTypes_MaxSize4", "cardinality(\"BaseTypes\") <= 4");

                            t.HasCheckConstraint("CK_ItemResourceEntity_BaseValues_MaxSize8", "cardinality(\"BaseValues\") <= 8");

                            t.HasCheckConstraint("CK_ItemResourceEntity_EnhanceIds_MaxSize2", "cardinality(\"EnhanceIds\") <= 2");

                            t.HasCheckConstraint("CK_ItemResourceEntity_EnhanceValues_MaxSize8", "cardinality(\"EnhanceValues\") <= 8");

                            t.HasCheckConstraint("CK_ItemResourceEntity_OptTypes_MaxSize4", "cardinality(\"OptTypes\") <= 4");

                            t.HasCheckConstraint("CK_ItemResourceEntity_OptValues_MaxSize8", "cardinality(\"OptValues\") <= 8");
                        });
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.LevelResourceEntity", b =>
                {
                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Level"));

                    b.Property<int[]>("JLvs")
                        .HasColumnType("integer[]");

                    b.Property<long>("NormalExp")
                        .HasColumnType("bigint");

                    b.HasKey("Level");

                    b.ToTable("LevelResources", t =>
                        {
                            t.HasCheckConstraint("CK_LevelResourceEntity_JLvs_MaxSize4", "cardinality(\"JLvs\") <= 4");
                        });
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.ModelEffectResourceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?[]>("BoneEffectIds")
                        .HasColumnType("bigint[]");

                    b.Property<string[]>("BoneNames")
                        .HasColumnType("text[]");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("EffectFileId")
                        .HasColumnType("bigint");

                    b.Property<int?>("EffectPosition")
                        .HasColumnType("integer");

                    b.Property<bool>("LoopEffect")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EffectFileId")
                        .IsUnique();

                    b.ToTable("ModelEffectResources");
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.SetItemEffectResourceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<short>("Parts")
                        .HasColumnType("smallint");

                    b.Property<short[]>("BaseTypes")
                        .HasColumnType("smallint[]");

                    b.Property<decimal[,]>("BaseValues")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric[]");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("EffectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short[]>("OptTypes")
                        .HasColumnType("smallint[]");

                    b.Property<decimal[,]>("OptValues")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric[]");

                    b.Property<long?>("TextId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TooltipId")
                        .HasColumnType("bigint");

                    b.HasKey("Id", "Parts");

                    b.HasIndex("TextId");

                    b.HasIndex("TooltipId");

                    b.ToTable("SetItemEffectResources", t =>
                        {
                            t.HasCheckConstraint("CK_SetItemEffectResourceEntity_BaseTypes_MaxSize4", "cardinality(\"BaseTypes\") <= 4");

                            t.HasCheckConstraint("CK_SetItemEffectResourceEntity_BaseValues_MaxSize8", "cardinality(\"BaseValues\") <= 8");

                            t.HasCheckConstraint("CK_SetItemEffectResourceEntity_OptTypes_MaxSize4", "cardinality(\"OptTypes\") <= 4");

                            t.HasCheckConstraint("CK_SetItemEffectResourceEntity_OptValues_MaxSize8", "cardinality(\"OptValues\") <= 8");
                        });
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.SkillResourceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CastRange")
                        .HasColumnType("integer");

                    b.Property<string>("CastingLevel")
                        .HasColumnType("text");

                    b.Property<string>("CastingType")
                        .HasColumnType("text");

                    b.Property<int>("CoolTimeGroupId")
                        .HasColumnType("integer");

                    b.Property<decimal>("CostEnergy")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("CostEnergyPerSkl")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("CostExp")
                        .HasColumnType("integer");

                    b.Property<int>("CostExpPerEnhance")
                        .HasColumnType("integer");

                    b.Property<int>("CostHavoc")
                        .HasColumnType("integer");

                    b.Property<int>("CostHavocPerSkl")
                        .HasColumnType("integer");

                    b.Property<int>("CostHp")
                        .HasColumnType("integer");

                    b.Property<decimal>("CostHpPer")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("CostHpPerSkl")
                        .HasColumnType("integer");

                    b.Property<decimal>("CostHpPerSklPer")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("CostItem")
                        .HasColumnType("integer");

                    b.Property<int>("CostItemCount")
                        .HasColumnType("integer");

                    b.Property<int>("CostItemCountPerSkl")
                        .HasColumnType("integer");

                    b.Property<int>("CostJp")
                        .HasColumnType("integer");

                    b.Property<int>("CostJpPerEnhance")
                        .HasColumnType("integer");

                    b.Property<int>("CostMp")
                        .HasColumnType("integer");

                    b.Property<decimal>("CostMpPer")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("CostMpPerEnhance")
                        .HasColumnType("integer");

                    b.Property<int>("CostMpPerSkl")
                        .HasColumnType("integer");

                    b.Property<decimal>("CostMpPerSklPer")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CriticalBonus")
                        .HasColumnType("integer");

                    b.Property<int>("CriticalBonusPerSkl")
                        .HasColumnType("integer");

                    b.Property<decimal>("DelayCast")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("DelayCastModePerEnhance")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("DelayCastPerSkl")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("DelayCommon")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("DelayCooltime")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("DelayCooltimeModePerEnhance")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("DelayCooltimePerSkl")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("DescriptionId")
                        .HasColumnType("bigint");

                    b.Property<int>("EffectType")
                        .HasColumnType("integer");

                    b.Property<int>("ElementalType")
                        .HasColumnType("integer");

                    b.Property<short>("HateBasic")
                        .HasColumnType("smallint");

                    b.Property<decimal>("HateMod")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("HatePerEnhance")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("HatePerSkill")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<short>("HitBonus")
                        .HasColumnType("smallint");

                    b.Property<short>("HitBonusPerEnhance")
                        .HasColumnType("smallint");

                    b.Property<string>("IconFileName")
                        .HasColumnType("text");

                    b.Property<long?>("IconId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCorpse")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHarmful")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPassive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPhysicalAct")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProjectile")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsToggle")
                        .HasColumnType("boolean");

                    b.Property<int>("IsValid")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("Percentage")
                        .HasColumnType("smallint");

                    b.Property<int>("ProbabilityIncBySlv")
                        .HasColumnType("integer");

                    b.Property<int>("ProbabilityOnHit")
                        .HasColumnType("integer");

                    b.Property<decimal>("ProjectileAcceleration")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("ProjectileSpeed")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("RequiredHavoc")
                        .HasColumnType("integer");

                    b.Property<int>("RequiredHavocBurst")
                        .HasColumnType("integer");

                    b.Property<int>("RequiredHp")
                        .HasColumnType("integer");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("integer");

                    b.Property<int>("RequiredMp")
                        .HasColumnType("integer");

                    b.Property<long?>("RequiredStateId")
                        .HasColumnType("bigint");

                    b.Property<int>("RequiredTarget")
                        .HasColumnType("integer");

                    b.Property<string>("SkillLvupLimit")
                        .HasColumnType("text");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<int>("StateLevelBase")
                        .HasColumnType("integer");

                    b.Property<decimal>("StateLevelPerEnhance")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("StateLevelPerSkill")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("StateSecond")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("StateSecondPerEnhance")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("StateSecondPerLevel")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<long?>("SummonId")
                        .HasColumnType("bigint");

                    b.Property<int>("Target")
                        .HasColumnType("integer");

                    b.Property<long?>("TextId")
                        .HasColumnType("bigint");

                    b.Property<int>("ToggleGroup")
                        .HasColumnType("integer");

                    b.Property<long?>("TooltipId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpgradeIntoSkillId")
                        .HasColumnType("bigint");

                    b.Property<bool>("UseOnCharacter")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseOnEnemy")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseOnGuild")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseOnMonster")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseOnNeutral")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseOnParty")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseOnPurple")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseOnSelf")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseOnSummon")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseWithAxe")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseWithCrossbow")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseWithDagger")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseWithDoubleAxe")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseWithDoubleDagger")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseWithDoubleSword")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseWithHeavybow")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseWithLightbow")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseWithOneHandAxe")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseWithOneHandMace")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseWithOneHandStaff")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseWithOneHandSword")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseWithShieldOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseWithSpear")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseWithTwoHandMace")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseWithTwoHandStaff")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseWithTwoHandSword")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseWithWeaponNotRequired")
                        .HasColumnType("boolean");

                    b.Property<int>("ValidRange")
                        .HasColumnType("integer");

                    b.Property<decimal[]>("Values")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric[]");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("RequiredStateId");

                    b.HasIndex("StateId");

                    b.HasIndex("SummonId");

                    b.HasIndex("TextId");

                    b.HasIndex("TooltipId");

                    b.HasIndex("UpgradeIntoSkillId")
                        .IsUnique();

                    b.ToTable("SkillResources", t =>
                        {
                            t.HasCheckConstraint("CK_SkillResourceEntity_Values_MaxSize20", "cardinality(\"Values\") <= 20");
                        });
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.StatResourceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Agility")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Dexterity")
                        .HasColumnType("integer");

                    b.Property<int>("Intelligence")
                        .HasColumnType("integer");

                    b.Property<int>("Luck")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Strength")
                        .HasColumnType("integer");

                    b.Property<int>("Vitality")
                        .HasColumnType("integer");

                    b.Property<int>("Wisdom")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("StatResources");
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.StateResourceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AddDamageBase")
                        .HasColumnType("integer");

                    b.Property<int>("AddDamagePerSkl")
                        .HasColumnType("integer");

                    b.Property<decimal>("AmplifyBase")
                        .HasPrecision(13, 3)
                        .HasColumnType("numeric(13,3)");

                    b.Property<decimal>("AmplifyPerSkill")
                        .HasPrecision(13, 3)
                        .HasColumnType("numeric(13,3)");

                    b.Property<int>("BaseEffect")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int[]>("DuplicateGroup")
                        .HasMaxLength(3)
                        .HasColumnType("integer[]");

                    b.Property<int>("EffectType")
                        .HasColumnType("integer");

                    b.Property<int>("ElementalType")
                        .HasColumnType("integer");

                    b.Property<int>("FireInterval")
                        .HasColumnType("integer");

                    b.Property<long>("FxId")
                        .HasColumnType("bigint");

                    b.Property<string>("IconFileName")
                        .HasColumnType("text");

                    b.Property<long>("IconId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsHarmful")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("PosId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReiterationCount")
                        .HasColumnType("text");

                    b.Property<int>("SpecialOutputFxId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialOutputFxPosId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialOutputTimingId")
                        .HasColumnType("integer");

                    b.Property<int>("StateGroup")
                        .HasColumnType("integer");

                    b.Property<short>("StateTimeType")
                        .HasColumnType("smallint");

                    b.Property<long?>("TextId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TooltipId")
                        .HasColumnType("bigint");

                    b.Property<bool>("UseOnCharacter")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseOnMonster")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseOnSummon")
                        .HasColumnType("boolean");

                    b.Property<decimal[]>("Values")
                        .HasPrecision(13, 3)
                        .HasColumnType("numeric[]");

                    b.HasKey("Id");

                    b.HasIndex("TextId");

                    b.HasIndex("TooltipId");

                    b.ToTable("StateResources", t =>
                        {
                            t.HasCheckConstraint("CK_StateResourceEntity_Values_MaxSize20", "cardinality(\"Values\") <= 20");
                        });
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.StringResourceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StringResources");
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.SummonResourceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AttackMotionSpeed")
                        .HasColumnType("integer");

                    b.Property<decimal>("AttackRange")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int[]>("CameraPosition")
                        .HasColumnType("integer[]");

                    b.Property<long?>("CardId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("EvolveTargetId")
                        .HasColumnType("bigint");

                    b.Property<int>("EvolveType")
                        .HasColumnType("integer");

                    b.Property<string>("FaceFileName")
                        .HasColumnType("text");

                    b.Property<long>("FaceId")
                        .HasColumnType("bigint");

                    b.Property<string>("IllustFileName")
                        .HasColumnType("text");

                    b.Property<bool>("IsRidingOnly")
                        .HasColumnType("boolean");

                    b.Property<int>("MagicType")
                        .HasColumnType("integer");

                    b.Property<int>("Material")
                        .HasColumnType("integer");

                    b.Property<long?>("ModelId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModelName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("MotionFileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NameId")
                        .HasColumnType("bigint");

                    b.Property<int>("RidingMotionType")
                        .HasColumnType("integer");

                    b.Property<int>("RidingSpeed")
                        .HasColumnType("integer");

                    b.Property<int>("RunSpeed")
                        .HasColumnType("integer");

                    b.Property<decimal>("Scale")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("Size")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<long?[]>("SkillIds")
                        .HasColumnType("bigint[]");

                    b.Property<int>("SlantType")
                        .HasColumnType("integer");

                    b.Property<int>("StandardRunSpeed")
                        .HasColumnType("integer");

                    b.Property<int>("StandardWalkSpeed")
                        .HasColumnType("integer");

                    b.Property<long?>("StatId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StringResourceEntityId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TargetFxSize")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal[]>("TargetPosition")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric[]");

                    b.Property<long>("TextFeatureId")
                        .HasColumnType("bigint");

                    b.Property<int>("TextureGroup")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("WalkType")
                        .HasColumnType("integer");

                    b.Property<int>("WeaponType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("EvolveTargetId")
                        .IsUnique();

                    b.HasIndex("ModelId");

                    b.HasIndex("NameId");

                    b.HasIndex("StatId");

                    b.HasIndex("StringResourceEntityId");

                    b.ToTable("SummonResources", t =>
                        {
                            t.HasCheckConstraint("CK_SummonResourceEntity_CameraPosition_MaxSize3", "cardinality(\"CameraPosition\") <= 3");
                        });
                });

            modelBuilder.Entity("Navislamia.Game.Models.GlobalVariableEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GlobalVariables");
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.EffectResourceEntity", b =>
                {
                    b.HasOne("Navislamia.Game.Models.Arcadia.ModelEffectResourceEntity", null)
                        .WithMany("BoneEffects")
                        .HasForeignKey("ModelEffectResourceEntityId");

                    b.HasOne("Navislamia.Game.Models.Arcadia.ItemEffectResourceEntity", "ItemEffect")
                        .WithMany()
                        .HasForeignKey("ItemEffectId", "ItemEffectOrdinalId");

                    b.HasOne("Navislamia.Game.Models.Arcadia.SetItemEffectResourceEntity", "Set")
                        .WithMany()
                        .HasForeignKey("SetId", "SetParts");

                    b.Navigation("ItemEffect");

                    b.Navigation("Set");
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.EnhanceResourceEntity", b =>
                {
                    b.HasOne("Navislamia.Game.Models.Arcadia.ItemResourceEntity", "RequiredItem")
                        .WithMany("RequiredByEnhanceResources")
                        .HasForeignKey("RequiredItemId");

                    b.Navigation("RequiredItem");
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.ItemEffectResourceEntity", b =>
                {
                    b.HasOne("Navislamia.Game.Models.Arcadia.StringResourceEntity", "Tooltip")
                        .WithMany("ItemEffectToolTips")
                        .HasForeignKey("TooltipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tooltip");
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.ItemResourceEntity", b =>
                {
                    b.HasOne("Navislamia.Game.Models.Arcadia.EffectResourceEntity", "Effect")
                        .WithOne("Item")
                        .HasForeignKey("Navislamia.Game.Models.Arcadia.ItemResourceEntity", "EffectId");

                    b.HasOne("Navislamia.Game.Models.Arcadia.StringResourceEntity", "Name")
                        .WithMany("ItemResourceNames")
                        .HasForeignKey("NameId");

                    b.HasOne("Navislamia.Game.Models.Arcadia.SkillResourceEntity", "Skill")
                        .WithMany("Items")
                        .HasForeignKey("SkillId");

                    b.HasOne("Navislamia.Game.Models.Arcadia.StateResourceEntity", "State")
                        .WithMany("Items")
                        .HasForeignKey("StateId");

                    b.HasOne("Navislamia.Game.Models.Arcadia.SummonResourceEntity", "Summon")
                        .WithMany("Items")
                        .HasForeignKey("SummonId");

                    b.HasOne("Navislamia.Game.Models.Arcadia.StringResourceEntity", "Tooltip")
                        .WithMany("ItemResourceTooltips")
                        .HasForeignKey("TooltipId");

                    b.Navigation("Effect");

                    b.Navigation("Name");

                    b.Navigation("Skill");

                    b.Navigation("State");

                    b.Navigation("Summon");

                    b.Navigation("Tooltip");
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.ModelEffectResourceEntity", b =>
                {
                    b.HasOne("Navislamia.Game.Models.Arcadia.EffectResourceEntity", "EffectFile")
                        .WithOne("Model")
                        .HasForeignKey("Navislamia.Game.Models.Arcadia.ModelEffectResourceEntity", "EffectFileId");

                    b.Navigation("EffectFile");
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.SetItemEffectResourceEntity", b =>
                {
                    b.HasOne("Navislamia.Game.Models.Arcadia.StringResourceEntity", "Text")
                        .WithMany("SetTexts")
                        .HasForeignKey("TextId");

                    b.HasOne("Navislamia.Game.Models.Arcadia.StringResourceEntity", "Tooltip")
                        .WithMany("SetTooltips")
                        .HasForeignKey("TooltipId");

                    b.Navigation("Text");

                    b.Navigation("Tooltip");
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.SkillResourceEntity", b =>
                {
                    b.HasOne("Navislamia.Game.Models.Arcadia.StringResourceEntity", "Description")
                        .WithMany("SkillDescriptions")
                        .HasForeignKey("DescriptionId");

                    b.HasOne("Navislamia.Game.Models.Arcadia.StateResourceEntity", "RequiredState")
                        .WithMany("RequiredBySkills")
                        .HasForeignKey("RequiredStateId");

                    b.HasOne("Navislamia.Game.Models.Arcadia.StateResourceEntity", "State")
                        .WithMany("Skills")
                        .HasForeignKey("StateId");

                    b.HasOne("Navislamia.Game.Models.Arcadia.SummonResourceEntity", "Summon")
                        .WithMany("Skills")
                        .HasForeignKey("SummonId");

                    b.HasOne("Navislamia.Game.Models.Arcadia.StringResourceEntity", "Text")
                        .WithMany("SkillTexts")
                        .HasForeignKey("TextId");

                    b.HasOne("Navislamia.Game.Models.Arcadia.StringResourceEntity", "Tooltip")
                        .WithMany("SkillTooltips")
                        .HasForeignKey("TooltipId");

                    b.HasOne("Navislamia.Game.Models.Arcadia.SkillResourceEntity", "SkillUpgrade")
                        .WithOne("Skill")
                        .HasForeignKey("Navislamia.Game.Models.Arcadia.SkillResourceEntity", "UpgradeIntoSkillId");

                    b.Navigation("Description");

                    b.Navigation("RequiredState");

                    b.Navigation("SkillUpgrade");

                    b.Navigation("State");

                    b.Navigation("Summon");

                    b.Navigation("Text");

                    b.Navigation("Tooltip");
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.StateResourceEntity", b =>
                {
                    b.HasOne("Navislamia.Game.Models.Arcadia.StringResourceEntity", "Text")
                        .WithMany("StateTexts")
                        .HasForeignKey("TextId");

                    b.HasOne("Navislamia.Game.Models.Arcadia.StringResourceEntity", "Tooltip")
                        .WithMany("StateTooltips")
                        .HasForeignKey("TooltipId");

                    b.Navigation("Text");

                    b.Navigation("Tooltip");
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.SummonResourceEntity", b =>
                {
                    b.HasOne("Navislamia.Game.Models.Arcadia.ItemResourceEntity", "Card")
                        .WithMany("Cards")
                        .HasForeignKey("CardId");

                    b.HasOne("Navislamia.Game.Models.Arcadia.SummonResourceEntity", "EvolveTarget")
                        .WithOne("EvolveSource")
                        .HasForeignKey("Navislamia.Game.Models.Arcadia.SummonResourceEntity", "EvolveTargetId");

                    b.HasOne("Navislamia.Game.Models.Arcadia.ModelEffectResourceEntity", "Model")
                        .WithMany("SummonModels")
                        .HasForeignKey("ModelId");

                    b.HasOne("Navislamia.Game.Models.Arcadia.StringResourceEntity", "Name")
                        .WithMany("SummonNames")
                        .HasForeignKey("NameId");

                    b.HasOne("Navislamia.Game.Models.Arcadia.StatResourceEntity", "Stat")
                        .WithMany("Summons")
                        .HasForeignKey("StatId");

                    b.HasOne("Navislamia.Game.Models.Arcadia.StringResourceEntity", null)
                        .WithMany("SummonSkillTexts")
                        .HasForeignKey("StringResourceEntityId");

                    b.Navigation("Card");

                    b.Navigation("EvolveTarget");

                    b.Navigation("Model");

                    b.Navigation("Name");

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.EffectResourceEntity", b =>
                {
                    b.Navigation("Item");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.ItemResourceEntity", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("RequiredByEnhanceResources");
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.ModelEffectResourceEntity", b =>
                {
                    b.Navigation("BoneEffects");

                    b.Navigation("SummonModels");
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.SkillResourceEntity", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.StatResourceEntity", b =>
                {
                    b.Navigation("Summons");
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.StateResourceEntity", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("RequiredBySkills");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.StringResourceEntity", b =>
                {
                    b.Navigation("ItemEffectToolTips");

                    b.Navigation("ItemResourceNames");

                    b.Navigation("ItemResourceTooltips");

                    b.Navigation("SetTexts");

                    b.Navigation("SetTooltips");

                    b.Navigation("SkillDescriptions");

                    b.Navigation("SkillTexts");

                    b.Navigation("SkillTooltips");

                    b.Navigation("StateTexts");

                    b.Navigation("StateTooltips");

                    b.Navigation("SummonNames");

                    b.Navigation("SummonSkillTexts");
                });

            modelBuilder.Entity("Navislamia.Game.Models.Arcadia.SummonResourceEntity", b =>
                {
                    b.Navigation("EvolveSource");

                    b.Navigation("Items");

                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
